1.Write a MongoDB query to display all the documents in the collection restaurants
> db.restaurants.find().pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43702c8"),
        "address" : {
                "building" : "8825",
                "coord" : [
                        -73.8803827,
                        40.7643124
                ],
                "street" : "Astoria Boulevard",
                "zipcode" : "11369"
        },
        "borough" : "Queens",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-11-15T00:00:00Z"),
                        "grade" : "Z",
                        "score" : 38
                },
                {
                        "date" : ISODate("2014-05-02T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                },
                {
                        "date" : ISODate("2013-03-02T00:00:00Z"),
                        "grade" : "A",
                        "score" : 7
                },
                {
                        "date" : ISODate("2012-02-10T00:00:00Z"),
                        "grade" : "A",
                        "score" : 13
                }
        ],
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
}
--------------------------------------------------------------------------
2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

> db.restaurants.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43702c8"),
        "borough" : "Queens",
        "cuisine" : "American",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
-----------------------------------------------------------------
3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

> db.restaurants.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty();
{
        "borough" : "Queens",
        "cuisine" : "American",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
}
-----------------------------------------------------------------

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.

> db.restaurants.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1,"_id":0}).pretty();
{
        "address" : {
                "zipcode" : "11369"
        },
        "borough" : "Queens",
        "name" : "Brunos On The Boulevard",
        "restaurant_id" : "40356151"
------------------------------------------------------------------
5. Write a MongoDB query to display all the restaurant which is in the borough Bronx

> db.restaurants.find({"borough":"Bronx"}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43702db"),
        "address" : {
                "building" : "2300",
                "coord" : [
                        -73.8786113,
                        40.8502883
                ],
                "street" : "Southern Boulevard",
                "zipcode" : "10460"
        },
        "borough" : "Bronx",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-05-28T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2013-06-19T00:00:00Z"),
                        "grade" : "A",
                        "score" : 4
                },
                {
                        "date" : ISODate("2012-06-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 3
                }
        ],
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
-----------------------------------------------------------------
6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

> db.restaurants.find({"borough":"Bronx"}).limit(5).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43702db"),
        "address" : {
                "building" : "2300",
                "coord" : [
                        -73.8786113,
                        40.8502883
                ],
                "street" : "Southern Boulevard",
                "zipcode" : "10460"
        },
        "borough" : "Bronx",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-05-28T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2013-06-19T00:00:00Z"),
                        "grade" : "A",
                        "score" : 4
                },
                {
                        "date" : ISODate("2012-06-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 3
                }
        ],
        "name" : "Wild Asia",
        "restaurant_id" : "40357217"
}
------------------------------------------------------------------
7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

> db.restaurants.find({"borough":"Bronx"}).skip(5).limit(5).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc437030b"),
        "address" : {
                "building" : "658",
                "coord" : [
                        -73.81363999999999,
                        40.82941100000001
                ],
                "street" : "Clarence Ave",
                "zipcode" : "10465"
        },
        "borough" : "Bronx",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-06-21T00:00:00Z"),
                        "grade" : "A",
                        "score" : 5
                },
                {
                        "date" : ISODate("2012-07-11T00:00:00Z"),
                        "grade" : "A",
                        "score" : 10
                }
        ],
        "name" : "Manhem Club",
        "restaurant_id" : "40364363"
}
------------------------------------------------------------------
8. Write a MongoDB query to find the restaurants who achieved a score more than 90.

> db.restaurants.find({grades:{$elemMatch:{score:{$gt:90}}}}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc4370425"),
        "address" : {
                "building" : "65",
                "coord" : [
                        -73.9782725,
                        40.7624022
                ],
                "street" : "West   54 Street",
                "zipcode" : "10019"
        },
        "borough" : "Manhattan",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-08-22T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2014-03-28T00:00:00Z"),
                        "grade" : "C",
                        "score" : 131
                },
                {
                        "date" : ISODate("2013-09-25T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2013-04-08T00:00:00Z"),
                        "grade" : "B",
                        "score" : 25
                },
                {
                        "date" : ISODate("2012-10-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2011-10-19T00:00:00Z"),
                        "grade" : "A",
                        "score" : 13
                }
        ],
        "name" : "Murals On 54/Randolphs'S",
        "restaurant_id" : "40372466"
}
-----------------------------------------------------------------
9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

> db.restaurants.find({grades:{$elemMatch:{score:{$gt:80,$lt:100}}}}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43704c7"),
        "address" : {
                "building" : "345",
                "coord" : [
                        -73.9864626,
                        40.7266739
                ],
                "street" : "East 6 Street",
                "zipcode" : "10003"
        },
        "borough" : "Manhattan",
        "cuisine" : "Indian",
        "grades" : [
                {
                        "date" : ISODate("2014-09-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 5
                },
                {
                        "date" : ISODate("2014-01-14T00:00:00Z"),
                        "grade" : "A",
                        "score" : 8
                },
                {
                        "date" : ISODate("2013-05-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2013-04-24T00:00:00Z"),
                        "grade" : "P",
                        "score" : 2
                },
                {
                        "date" : ISODate("2012-10-01T00:00:00Z"),
                        "grade" : "A",
                        "score" : 9
                },
                {
                        "date" : ISODate("2012-04-06T00:00:00Z"),
                        "grade" : "C",
                        "score" : 92
                },
                {
                        "date" : ISODate("2011-11-03T00:00:00Z"),
                        "grade" : "C",
                        "score" : 41
                }
        ],
        "name" : "Gandhi",
        "restaurant_id" : "40381295"
}
-------------------------------------------------------------------
10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.

> db.restaurants.find({"address.coord":{$lt:-95.754168}}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc4370911"),
        "address" : {
                "building" : "3707",
                "coord" : [
                        -101.8945214,
                        33.5197474
                ],
                "street" : "82 Street",
                "zipcode" : "11372"
        },
        "borough" : "Queens",
        "cuisine" : "American",
        "grades" : [
                {
                        "date" : ISODate("2014-06-04T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2013-11-07T00:00:00Z"),
                        "grade" : "B",
                        "score" : 19
                },
                {
                        "date" : ISODate("2013-05-17T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2012-08-29T00:00:00Z"),
                        "grade" : "A",
                        "score" : 11
                },
                {
                        "date" : ISODate("2012-04-03T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2011-11-16T00:00:00Z"),
                        "grade" : "A",
                        "score" : 7
                }
        ],
        "name" : "Burger King",
        "restaurant_id" : "40534067"
}
------------------------------------------------------------------
11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

> db.restaurants.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt:-65.754168}}]}).pretty();
{
        "_id" : ObjectId("5d916ac91ae3eeefc43704c7"),
        "address" : {
                "building" : "345",
                "coord" : [
                        -73.9864626,
                        40.7266739
                ],
                "street" : "East 6 Street",
                "zipcode" : "10003"
        },
        "borough" : "Manhattan",
        "cuisine" : "Indian",
        "grades" : [
                {
                        "date" : ISODate("2014-09-15T00:00:00Z"),
                        "grade" : "A",
                        "score" : 5
                },
                {
                        "date" : ISODate("2014-01-14T00:00:00Z"),
                        "grade" : "A",
                        "score" : 8
                },
                {
                        "date" : ISODate("2013-05-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2013-04-24T00:00:00Z"),
                        "grade" : "P",
                        "score" : 2
                },
                {
                        "date" : ISODate("2012-10-01T00:00:00Z"),
                        "grade" : "A",
                        "score" : 9
                },
                {
                        "date" : ISODate("2012-04-06T00:00:00Z"),
                        "grade" : "C",
                        "score" : 92
                },
                {
                        "date" : ISODate("2011-11-03T00:00:00Z"),
                        "grade" : "C",
                        "score" : 41
                }
        ],
        "name" : "Gandhi",
        "restaurant_id" : "40381295"
}
----------------------------------------------------------------
12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
> db.restaurants.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt:-65.754168}}]}).pretty();
--------------------------------------------------------------------------------------
13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

> db.restaurants.find( {
...                              "cuisine" : {$ne : "American "},
...                              "grades.grade" :"A",
...                              "borough": {$ne : "Brooklyn"}
...                        }
...                     ).sort({"cuisine":-1}).pretty();
--------------------------------------------------------------------------------------
14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.

> db.restaurants.find( {name: /^Wil/}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty();
-------------------------------------------------------------------------------------

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.

> db.restaurants.find( {name: /ces$/}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty();
---------------------------------------------------------------------------------

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
> db.restaurants.find( {name: /Reg/}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty();
-------------------------------------------------------------------------------------
17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

> db.restaurants.find({"borough":"Bronx",$or:[{"cuisine":"American"},{"cuisine":"Chinese"}]}).pretty();
----------------------------------------------------------------------------------

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn.

> db.restaurants.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty();
--------------------------------------------------------------------------------------

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.

> db.restaurants.find({"borough":{$nin:["Staten Island","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty();
---------------------------------------------------------------------------------------

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.

> db.restaurants.find({"grades.score":{$not:{$gt:10}}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty();
--------------------------------------------------------------------------------------

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

>db.restaurants.find(
{$or: [
  {name: /^Wil/}, 
  {"$and": [
       {"cuisine" : {$ne :"American "}}, 
       {"cuisine" : {$ne :"Chinees"}}
   ]}
]}
,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
);
---------------------------------------------------------------------------------------
22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates

>db.restaurants.find( 
                {
                 "grades.date": ISODate("2014-08-11T00:00:00Z"), 
                 "grades.grade":"A" , 
                 "grades.score" : 11
                }, 
                {"restaurant_id" : 1,"name":1,"grades":1}
             );
-----------------------------------------------------------------
23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".

>db.restaurants.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   );

-----------------------------------------------------------------
24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52

>db.restaurants.find( 
                      { 
                        "address.coord.1": {$gt : 42, $lte : 52}
                      },
                        {"restaurant_id" : 1,"name":1,"address":1,"coord":1}
                   );

--------------------------------------------------------------------
25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

> db.restaurants.find().sort({"name":1}).pretty();

---------------------------------------------------------------------
26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

>db.restaurants.find().sort({"name":-1}),pretty();
                                             
------------------------------------------------------------------
27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.

db.restaurants.find().sort({"cuisine":1,"borough" : -1,}).pretty();
                           
-------------------------------------------------------------------
28. Write a MongoDB query to know whether all the addresses contains the street or not.

db.restaurants.find({"address.street" :{ $exists : true }}).pretty();
                   
------------------------------------------------------------------
29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.

db.restaurants.find({"address.coord" :{$type : 1}}).pretty();
                                
------------------------------------------------------------------
30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.

db.restaurants.find({"grades.score" :{$mod : [7,0]}},{"restaurant_id" : 1,"name":1,"grades":1}).pretty();                   
------------------------------------------------------------------------
31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.

> db.restaurants.find({"name":/mon/},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty();
----------------------------------------------------------------
32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.

> db.restaurants.find({"name":/^Mad/},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty();
